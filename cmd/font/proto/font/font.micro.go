// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: font.proto

/*
Package font is a generated protocol buffer package.

It is generated from these files:
	font.proto

It has these top-level messages:
	IndexRequest
	Ids
	IndexResponse
	Font
*/
package font

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Fonts service

type FontsService interface {
	Index(ctx context.Context, in *IndexRequest, opts ...client.CallOption) (*IndexResponse, error)
}

type fontsService struct {
	c    client.Client
	name string
}

func NewFontsService(name string, c client.Client) FontsService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "font"
	}
	return &fontsService{
		c:    c,
		name: name,
	}
}

func (c *fontsService) Index(ctx context.Context, in *IndexRequest, opts ...client.CallOption) (*IndexResponse, error) {
	req := c.c.NewRequest(c.name, "Fonts.Index", in)
	out := new(IndexResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Fonts service

type FontsHandler interface {
	Index(context.Context, *IndexRequest, *IndexResponse) error
}

func RegisterFontsHandler(s server.Server, hdlr FontsHandler, opts ...server.HandlerOption) error {
	type fonts interface {
		Index(ctx context.Context, in *IndexRequest, out *IndexResponse) error
	}
	type Fonts struct {
		fonts
	}
	h := &fontsHandler{hdlr}
	return s.Handle(s.NewHandler(&Fonts{h}, opts...))
}

type fontsHandler struct {
	FontsHandler
}

func (h *fontsHandler) Index(ctx context.Context, in *IndexRequest, out *IndexResponse) error {
	return h.FontsHandler.Index(ctx, in, out)
}
