// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: trial.proto

/*
Package trial is a generated protocol buffer package.

It is generated from these files:
	trial.proto

It has these top-level messages:
	CreateRequest
	CreateResponse
	ShowRequest
	ShowResponse
*/
package trial

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for AuthCompany service

type AuthCompanyService interface {
	Show(ctx context.Context, in *ShowRequest, opts ...client.CallOption) (*ShowResponse, error)
	Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error)
}

type authCompanyService struct {
	c    client.Client
	name string
}

func NewAuthCompanyService(name string, c client.Client) AuthCompanyService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "trial"
	}
	return &authCompanyService{
		c:    c,
		name: name,
	}
}

func (c *authCompanyService) Show(ctx context.Context, in *ShowRequest, opts ...client.CallOption) (*ShowResponse, error) {
	req := c.c.NewRequest(c.name, "AuthCompany.Show", in)
	out := new(ShowResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authCompanyService) Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error) {
	req := c.c.NewRequest(c.name, "AuthCompany.Create", in)
	out := new(CreateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuthCompany service

type AuthCompanyHandler interface {
	Show(context.Context, *ShowRequest, *ShowResponse) error
	Create(context.Context, *CreateRequest, *CreateResponse) error
}

func RegisterAuthCompanyHandler(s server.Server, hdlr AuthCompanyHandler, opts ...server.HandlerOption) error {
	type authCompany interface {
		Show(ctx context.Context, in *ShowRequest, out *ShowResponse) error
		Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error
	}
	type AuthCompany struct {
		authCompany
	}
	h := &authCompanyHandler{hdlr}
	return s.Handle(s.NewHandler(&AuthCompany{h}, opts...))
}

type authCompanyHandler struct {
	AuthCompanyHandler
}

func (h *authCompanyHandler) Show(ctx context.Context, in *ShowRequest, out *ShowResponse) error {
	return h.AuthCompanyHandler.Show(ctx, in, out)
}

func (h *authCompanyHandler) Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error {
	return h.AuthCompanyHandler.Create(ctx, in, out)
}
