// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: auditLog.proto

/*
Package AuditLog is a generated protocol buffer package.

It is generated from these files:
	auditLog.proto

It has these top-level messages:
	Request
	AuditLogBracket
	LogShowResponse
	AuditLogResponse
*/
package AuditLog

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for AuditLog service

type AuditLogService interface {
	AuditLogIndex(ctx context.Context, in *Request, opts ...client.CallOption) (*AuditLogResponse, error)
	AuditLogShow(ctx context.Context, in *Request, opts ...client.CallOption) (*LogShowResponse, error)
}

type auditLogService struct {
	c    client.Client
	name string
}

func NewAuditLogService(name string, c client.Client) AuditLogService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "AuditLog"
	}
	return &auditLogService{
		c:    c,
		name: name,
	}
}

func (c *auditLogService) AuditLogIndex(ctx context.Context, in *Request, opts ...client.CallOption) (*AuditLogResponse, error) {
	req := c.c.NewRequest(c.name, "AuditLog.AuditLogIndex", in)
	out := new(AuditLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditLogService) AuditLogShow(ctx context.Context, in *Request, opts ...client.CallOption) (*LogShowResponse, error) {
	req := c.c.NewRequest(c.name, "AuditLog.AuditLogShow", in)
	out := new(LogShowResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuditLog service

type AuditLogHandler interface {
	AuditLogIndex(context.Context, *Request, *AuditLogResponse) error
	AuditLogShow(context.Context, *Request, *LogShowResponse) error
}

func RegisterAuditLogHandler(s server.Server, hdlr AuditLogHandler, opts ...server.HandlerOption) error {
	type auditLog interface {
		AuditLogIndex(ctx context.Context, in *Request, out *AuditLogResponse) error
		AuditLogShow(ctx context.Context, in *Request, out *LogShowResponse) error
	}
	type AuditLog struct {
		auditLog
	}
	h := &auditLogHandler{hdlr}
	return s.Handle(s.NewHandler(&AuditLog{h}, opts...))
}

type auditLogHandler struct {
	AuditLogHandler
}

func (h *auditLogHandler) AuditLogIndex(ctx context.Context, in *Request, out *AuditLogResponse) error {
	return h.AuditLogHandler.AuditLogIndex(ctx, in, out)
}

func (h *auditLogHandler) AuditLogShow(ctx context.Context, in *Request, out *LogShowResponse) error {
	return h.AuditLogHandler.AuditLogShow(ctx, in, out)
}
